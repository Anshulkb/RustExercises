Variable DIY

//Below are the examples included in variable chapter.

  //  1) A variable can be used only if it has been initialized.
    
         fn main() {
          let x: i32=5; // Uninitialized but used, ERROR !
          let _y: i32; // Uninitialized but also unused, only a Warning !

          assert_eq!(x, 5);
          println!("Success!");
         }
         
  //  2) Use mut to mark a variable as mutable.
     
        fn main() {
          let mut x =  1;
          x += 2; 
    
          assert_eq!(x, 3);
          println!("Success!");
        }
        
        // Scope 
        
  //  3) 
         fn main() {
           let x: i32 = 10;
            {
              let y: i32 = 5;
              println!("The value of x is {} and value of y is {}", x, y);
            }
           println!("The value of x is {} ", x); 
         }
         
         
   //  4) 
          fn main() {
            let x= define_x();
             println!("{}, world", x); 
          }

            fn define_x() -> String {
              let x = "hello".to_string();
              x
            }

          
          
          
     //     Shadowing     
          
   //   5) 
            fn main() {
              let x: i32 = 5;
                {
                  let x = 12;
                  assert_eq!(x, 12);
                }

              assert_eq!(x, 5);

              let x =  42;
              println!("{}", x); // Prints "42".
            }
            
            
            
   //   6)  
            fn main() {
               let mut x: i32 = 1;
                x = 7;
              // Shadowing and re-binding
                let x=x;
               
                let y = 4;
              // Shadowing
                let y = "I can also be bound to text!"; 

              println!("Success!");
            }
            
            
            
              // Unused Variable
        
        //  8)   
                fn main() {
                  let mut x = 1; 
                  println!("{x}, {}",x+1);
                }
                
            // Destructuring
            
      //    9)  
                fn main() {
                  let (mut x, mut y) = (1, 2);
                  x += 2;

                   assert_eq!(x, 3);
                   assert_eq!(y, 2);

                   println!("Success!");
                }
                
                
              // Destructuring assignments
              
              
        //    10)
                  fn main() {
                     let (x, y);
                     (x,..) = (3, 4);
                      [.., y] = [1, 2];
                // Fill the blank to make the code work
                      assert_eq!([x,y], [3,2]);

                      println!("Success!");
                  }
            
   
      
