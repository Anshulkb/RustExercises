

//      1)
          fn main() {
            let (x, y) = (1, 2);
            let s = sum(x, y);

            assert_eq!(s, 3);

            println!("Success!");
          }

          fn sum(x: i32, y: i32) -> i32 {
            return x + y;
          }
          
          
//     2)
          fn main() {
             print();
          }

          fn print() -> () {
            println!("Success!");
          }
          
//     3) 
          fn main() {
            never_return();

            // println!("Failed!");
          }

          fn never_return() -> ! {
           // Implement this function, don't modify the fn signatures
            panic!("Success!")
          }
          
//     4)
          fn main() {
            println!("Success!");
          }

          fn get_option(tp: u8) -> Option<i32> {
             match tp {
                1 => {
                     // TODO
                }
                _ => {
                  // TODO
                }
              };
    
          // Rather than returning a None, we use a diverging function instead
            never_return_fn()
          }

        fn never_return_fn() -> ! {
         panic!();
          unimplemented!();
        }
        
        
//    5)
        fn main() {
          let b = false;
        // making v private variable
          let _v = match b {
              true => 1,
              // Diverging functions can also be used in match expression to replace a value of any value
              false => {
            println!("Success!");
            panic!("we have no value for `false`, but we can panic");
             }
          };

          println!("Exercise Failed if printing out this line!");
        }
